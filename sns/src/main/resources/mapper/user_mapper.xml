<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.my.module.userRole.repository.UserRepository">
    <sql id="fullColumn">
        userName, 
        userGender,
        userNickName,
        userEmail,
        userPwd,
        userPN,
        userSchool,
        userAddress,
        userSocial,
        userSocialId,
        emailHash,
        emailcertification,
        userImage,
        userRegDate,
        userAd,
        userRegTime,
        userInfoType,
        role
    </sql>
    <!-- 유저 아이디(이메일)를 통해 모든 회원정보 가져오기 -->
    <select id="findByUserId" resultType="com.project.my.module.userRole.entity.UserInfoEntity"> 
        SELECT <include refid="fullColumn"/>
        FROM userinfo
        WHERE userEmail = #{userEmail}
    </select>
    <!-- 유저 아이디(이메일, 네이버)를 통해 모든 회원정보 가져오기 -->
    <select id="findByLoginId" resultType="com.project.my.module.userRole.entity.UserInfoEntity"> 
        SELECT <include refid="fullColumn"/>
        FROM userinfo
        WHERE userSocialId = #{provideId}
    </select>
    <!-- 유저 이메일 중복 검사 -->
    <select id="userEmailChk" resultType="int">
        SELECT COUNT(*) 
        FROM userinfo
        WHERE userEmail = #{userEmail}
    </select> 
      <!-- 유저 휴대폰 중복 검사 -->
    <select id="userPhoneNumChk" resultType="int">
        SELECT COUNT(*) 
        FROM userinfo
        WHERE userPN = #{userPhoneNum}
    </select> 
    <!-- 일반 회원가입 정보 INSERT -->
    <insert id="insertMember" parameterType="map">
        INSERT INTO userinfo(<include refid="fullColumn"/>)
        VALUES(
                #{userName},
                #{userGender},
                #{userNickName},
                #{userEmail},
                #{userPwd},
                #{userPN},
                '-',
                '-',
                '-',
                '-',
                #{emailHash},
                '0',
                'images/profile.svg',
                NOW(),
                #{userAd},
                NOW(),
                '일반',
                'USER'
              )
    </insert>
    <!-- 소셜 회원가입 정보 INSERT -->
    <insert id="insertSocialMember" parameterType="map">
        INSERT INTO userinfo(<include refid="fullColumn"/>)
        VALUES(
                #{userName},
                #{userGender},
                #{userNickName},
                #{userEmail},
                '-',
                #{userPN},
                '-',
                '-',
                '-',
                #{userSocialId},
                '-',
                #{emailcertification},
                #{userImage},
                NOW(),
                '0',
                NOW(),
                #{userInfoType},
                #{role}
              )
    </insert>
    <!-- 이메일 해쉬값으로 이메일 찾기 -->
    <select id="getUserEmail" resultType="String">
        SELECT userEmail
        FROM userinfo
        WHERE emailHash = #{code}
    </select>   
    <!-- 이메일 검증하기 -->
    <update id="setEmailcertification">
        UPDATE userinfo
        SET emailcertification = 1
        WHERE userEmail = #{userEmail}
    </update>
    <!-- 유저 아이디 찾기 -->
    <select id="findUserId" resultType="com.project.my.module.userRole.entity.UserInfoEntity" parameterType="map">
        SELECT userEmail, userRegDate, userInfoType
        FROM userinfo
        WHERE userName = #{userName} and userNickName = #{userNickName} and role = 'USER'
    </select> 
    <!-- 유저 비밀번호 찾기 -->
    <select id="findUserPwd" resultType="com.project.my.module.userRole.entity.UserInfoEntity" parameterType="map">
        SELECT userPwd, userInfoType
        FROM userinfo
        WHERE userEmail = #{userEmail} and role = 'USER'
    </select>   
    <!-- 회원 비밀번호 변경하기 -->
	<update id="updateUserPassword">
        UPDATE userinfo 
        set userPwd = #{changePassword}
        WHERE userEmail = #{userEmail}
    </update> 

    <!--******************************** 관리자 기능 ******************************-->
    <!-- 유저 정보 찾기(관리자) -->
    <select id="search" parameterType="map" resultType="com.project.my.module.userRole.entity.UserInfoEntity">
        SELECT userName, userNickName, userEmail, userSocialId, userPN, userAddress, emailcertification, userInfoType, userRegDate
        FROM userinfo
        WHERE userName LIKE concat ('%', #{userName}, '%') and role = 'USER'
    </select>    
    <!-- userInfo 정보 삭제 -->
    <delete id="deleteUserInfo">
        delete 
        from userinfo 
        where userEmail = #{userEmail}
    </delete>
    <!-- 유저와 연결된 테이블 삭제 -->
    <!-- TODO -->
    <!-- 유저 게시물 찾기(관리자) -->
    <select id="searchPost" parameterType="map" resultType="com.project.my.module.userRole.entity.PostEntity">
        SELECT postId, userEmail, likeNum, imageName, videoName, shareNum, commentNum, creationDate, postReport
        FROM post
        WHERE userEmail LIKE concat ('%', #{userEmail}, '%')
    </select> 
    <!-- 게시물 정보 삭제 -->
    <delete id="deleteUserPost">
        delete 
        from post 
        where postId = #{postId}
    </delete>
    <!-- 게시물과 연결된 테이블 삭제 -->
    <!-- TODO --> 

    <!-- 유저 이메일 주소 찾기(관리자) -->
    <select id="searchUserEmail" parameterType="map" resultType="com.project.my.module.userRole.entity.UserInfoEntity">
        SELECT userEmail
        FROM userinfo
        WHERE userAd = 1 and userEmail LIKE concat ('%', #{userEmail}, '%')
    </select> 
    <!-- 광고수신 유저 휴대폰 번호 가져오기(관리자) -->
    <select id="selectUserPhoneList" resultType="com.project.my.module.sns.dto.SMSDTO">
        SELECT userPN 
        FROM userinfo 
        WHERE userAd = 1
    </select>       
</mapper>


